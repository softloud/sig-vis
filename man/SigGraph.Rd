% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sig_graph.R
\name{SigGraph}
\alias{SigGraph}
\title{SIG Graph Constructor}
\description{
The `SigGraph` class creates tidygraph objects from SIG data, with
support for node aggregation and graph manipulation operations.
}
\details{
An R6 class for constructing and manipulating graph objects from 
structured intelligence governance data using tidygraph.


This class takes SigDat objects and converts them into tidygraph
networks, supporting different aggregation strategies and providing
methods for graph analysis.
}
\examples{
\dontrun{
# Create from SigDat object
sig_dat <- SigDat$new(source = "template")
sig_graph <- SigGraph$new(sig_dat = sig_dat)
graph <- sig_graph$get_graph()

# Check graph properties
sig_graph$node_count()
sig_graph$edge_count()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{sig_dat}}{SigDat object containing the source data}

\item{\code{edges}}{Data frame of edges for graph construction}

\item{\code{nodes}}{Data frame of nodes for graph construction}

\item{\code{graph}}{tidygraph object representing the network}

\item{\code{aggregation}}{Character vector of aggregation options
Initialize SigGraph object}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SigGraph-new}{\code{SigGraph$new()}}
\item \href{#method-SigGraph-get_graph}{\code{SigGraph$get_graph()}}
\item \href{#method-SigGraph-refresh}{\code{SigGraph$refresh()}}
\item \href{#method-SigGraph-node_count}{\code{SigGraph$node_count()}}
\item \href{#method-SigGraph-edge_count}{\code{SigGraph$edge_count()}}
\item \href{#method-SigGraph-set_aggregation}{\code{SigGraph$set_aggregation()}}
\item \href{#method-SigGraph-clone}{\code{SigGraph$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-new"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$new(sig_dat = NULL, source = "template")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sig_dat}}{SigDat object containing nodes and edges data}

\item{\code{source}}{Character. Data source identifier (unused in current implementation)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `SigGraph` object
Get the tidygraph object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-get_graph"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-get_graph}{}}}
\subsection{Method \code{get_graph()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$get_graph()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
tidygraph object representing the network
Refresh the graph
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-refresh"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-refresh}{}}}
\subsection{Method \code{refresh()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$refresh()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisibly returns self for method chaining
Count nodes in the graph
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-node_count"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-node_count}{}}}
\subsection{Method \code{node_count()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$node_count()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Integer number of nodes
Count edges in the graph
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-edge_count"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-edge_count}{}}}
\subsection{Method \code{edge_count()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$edge_count()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Integer number of edges
Set node aggregation strategy
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-set_aggregation"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-set_aggregation}{}}}
\subsection{Method \code{set_aggregation()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$set_aggregation(aggregation = c("none", "node_context"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{aggregation}}{Character. Either "none" or "node_context"}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SigGraph-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SigGraph-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SigGraph$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
